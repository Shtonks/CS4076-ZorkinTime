//<LUKE>.tci stand for template class implementation, something I copied/made up since there is not standard file extension
#ifndef INVENTORYARRAYTEMP_TCI
#define INVENTORYARRAYTEMP_TCI

#include <iostream>
#include <exception>
#include <string>

#include "Trap.h"
#include "Blueprint.h"

using namespace std;


template <class T>
class InventoryTemplate
{
private:
    int length;
    T* inventory;

public:
    InventoryTemplate(){
        InventoryTemplate(5);
    }

    InventoryTemplate(int length)
    {
        if(length > 0){
            inventory = new T[length];
            this->length = length;
        }
    }

    ~InventoryTemplate()
    {
        delete[] inventory;
    }


    //<LUKE> I took this from lec slides since is extremely useful bit of code for a custom array
    T &operator[](int subscript)
    {
        if(subscript < 0 || subscript >= length)
            throw out_of_range("Subscript is out of range");

        return inventory[subscript];
    }

    //<LUKE> Removes element from anywhere in array by shifting all elemets over to the left by one
    void remove(T &item){
        for(int i = 0; i < length; i++){
            if(inventory[i] == item){
                for(int j = i; j < length - 1; j++){
                    inventory[j] = inventory[j + 1];
                }
                inventory[length - 1] = T();
                return;
            }
        }
    }


    //<LUKE> Add item to array if space exists, else throw error
    void add(const T &item){
        for(int i = 0; i < length; i++){
            if(inventory[i].getName() == ""){
                inventory[i] = item;
                return;
            }
        }
        throw out_of_range("No more room in inventory");
    }

    T* get(const T& item){
        for(int i = 0; i < length; i++){
            if(inventory[i] == item) return &inventory[i];
        }
        return nullptr;
    }

    T* get(const string name){
        for(int i = 0; i < length; i++){
            if(inventory[i].getName() == name) return &inventory[i];
        }
        return nullptr;
    }

    int getLength() const{
        return length;
    }
};

#endif // INVENTORYARRAYTEMP_TCI
